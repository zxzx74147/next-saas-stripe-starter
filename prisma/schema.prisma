// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum VideoProjectStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum VideoTaskStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  role          UserRole  @default(USER)

  accounts Account[]
  sessions Session[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  videoProjects      VideoProject[]
  creditBalance      UserCreditBalance?
  creditTransactions CreditTransaction[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model VideoProject {
  id           String             @id @default(cuid())
  userId       String
  name         String
  description  String?
  status       VideoProjectStatus @default(DRAFT)
  videoSubject String?
  videoScript  String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoTasks VideoTask[]

  @@index([userId])
  @@map(name: "video_projects")
}

model VideoTask {
  id             String          @id @default(cuid())
  projectId      String
  taskId         String
  status         VideoTaskStatus @default(PENDING)
  progress       Int             @default(0)
  videoUrl       String?
  thumbnailUrl   String?
  videoSettings  Json
  creditsCost    Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  isEdited       Boolean         @default(false)
  originalTaskId String?

  project            VideoProject        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creditTransactions CreditTransaction[]
  editedFrom         VideoTask?          @relation("EditHistory", fields: [originalTaskId], references: [id])
  editedVersions     VideoTask[]         @relation("EditHistory")

  @@index([projectId])
  @@index([originalTaskId])
  @@map(name: "video_tasks")
}

model SubscriptionConfig {
  id             String   @id @default(cuid())
  tier           String   @unique
  maxDuration    Int // seconds
  maxQuality     String
  monthlyCredits Int
  overageRate    Float
  overageCap     Float
  features       Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map(name: "subscription_configs")
}

model CreditTransaction {
  id          String   @id @default(cuid())
  userId      String
  amount      Int // credits used (negative) or purchased (positive)
  type        String // 'generation', 'purchase', 'allocation', 'overage'
  description String?
  videoTaskId String?
  createdAt   DateTime @default(now())

  user      User       @relation(fields: [userId], references: [id])
  videoTask VideoTask? @relation(fields: [videoTaskId], references: [id])

  @@index([userId])
  @@index([videoTaskId])
  @@map(name: "credit_transactions")
}

model UserCreditBalance {
  id                String   @id @default(cuid())
  userId            String   @unique
  currentBalance    Int      @default(0)
  monthlyAllocation Int      @default(0)
  lastResetDate     DateTime @default(now())
  overageThisMonth  Float    @default(0)

  user User @relation(fields: [userId], references: [id])

  @@map(name: "user_credit_balances")
}
